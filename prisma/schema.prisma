generator client {
  provider = "prisma-client-js"
  output   = "./generated/timescale-client"
}

datasource db {
  provider = "postgresql"
  url      = env("TIMESCALE_DATABASE_URL")
}

model primeUser {
  id       String @id @default(uuid()) @map("id")
  email    String @unique
  password String
}

model Patient {
  id                 String    @id
  fullName           String
  email              String    @unique
  dateOfBirth        String
  contactInformation String
  age                Int
  gender             String
  height             Float
  weight             Float
  visits             Visit[] // One-to-Many with Visit
  clinic             Clinic? // One-to-One with Clinic
  fhirId             String?
  abhaId             String?
  server_createdAt   DateTime  @default(now())
  server_updatedAt   DateTime  @default(now()) @updatedAt
  server_deletedAt   DateTime?

  @@index([server_updatedAt])
  @@index([server_deletedAt])
}

model Visit {
  id               String            @id
  patient_id       String
  visitDate        String
  visitNotes       String?
  visitType        String
  encounterfhirid  String?
  intervals        Interval[]
  patient          Patient           @relation(fields: [patient_id], references: [id]) // One-to-Many with Patient
  server_createdAt DateTime          @default(now())
  server_updatedAt DateTime          @default(now()) @updatedAt
  server_deletedAt DateTime?
  TemperatureData  TemperatureData[]
  BiosensorData    BiosensorData[]
  GsrData          GsrData[]
  GlucoseData      GlucoseData[]

  @@index([server_updatedAt])
  @@index([server_deletedAt])
}

model Interval {
  id               String    @id
  visit_id         String
  intervalType     String
  interval_tag     Int
  configuration    String
  frequencies      String
  dataPoints       String
  visit            Visit     @relation(fields: [visit_id], references: [id])
  server_createdAt DateTime  @default(now())
  server_updatedAt DateTime  @default(now()) @updatedAt
  server_deletedAt DateTime?

  @@index([server_updatedAt])
  @@index([server_deletedAt])
}

model Clinic {
  id                   String    @id @unique
  patient_id           String?   @unique // Ensures One-to-One relation
  bloodGroup           String
  antigenStatus        String
  systolic             Int
  diastolic            Int
  temperature          Float
  smokingType          String
  overAllYearOfSmoking Int
  dailyConsumption     Int
  smokingIndex         Int
  alcoholFreeDays      Int
  alcoholType          String
  alcoholConsumption   Int
  hemoglobin           Int
  reacentHealthIssue   String
  hereditaryHistory    String
  patient              Patient?  @relation(fields: [patient_id], references: [id]) // One-to-One with Patient
  observationfhirid    String?
  server_createdAt     DateTime  @default(now())
  server_updatedAt     DateTime  @default(now()) @updatedAt
  server_deletedAt     DateTime?

  @@index([server_updatedAt])
  @@index([server_deletedAt])
}

model BiosensorData {
  id           String @default(uuid())
  vid          String
  config       String
  frequency    Int
  bioImpedance Float
  phaseAngle   Float

  visit        Visit    @relation(fields: [vid], references: [id])
  collected_at DateTime @default(now())

  @@unique([id, collected_at])
}

model TemperatureData {
  id           String   @default(uuid())
  vid          String
  config       String
  frequency    Int
  temperature  Float
  visit        Visit    @relation(fields: [vid], references: [id])
  collected_at DateTime @default(now())

  @@unique([id, collected_at])
}

model GsrData {
  id        String @default(uuid())
  vid       String
  config    String
  frequency Int
  gsr       Float

  visit        Visit    @relation(fields: [vid], references: [id])
  collected_at DateTime @default(now())

  @@unique([id, collected_at])
}

model GlucoseData {
  id        String @default(uuid())
  vid       String
  config    String
  frequency Int
  glucose   Float

  visit Visit @relation(fields: [vid], references: [id])

  collected_at DateTime @default(now())

  @@unique([id, collected_at])
}
